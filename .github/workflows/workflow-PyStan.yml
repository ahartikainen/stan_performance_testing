name: PyStan

on: [push]

jobs:
  tests:
    name: PyStan
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: [3.8]
      fail-fast: false
    steps:
      - name: Checkout github
        uses: actions/checkout@v2
      - name: Setup conda
        uses: s-weigand/setup-conda@v1
        with:
          update-conda: true
          python-version: ${{ matrix.python-version }}
          conda-channels: conda-forge
      - run: conda --version

      - name: Install python dependencies (Windows)
        run: |
          pip install --upgrade pip
          conda install m2w64-toolchain libpython -c msys2 -c conda-forge -c anaconda -c defaults
          pip install numpy cython arviz
          pip install pystan
        if: matrix.os == 'windows-latest'

      - name: Install python dependencies (macOS, Linux)
        run: |
          pip install --upgrade pip
          pip install numpy cython arviz
          pip install pystan
        if: matrix.os != 'windows-latest'

      - name: PyStan and ArviZ versions
        run: |
          python -c "import arviz;print('ArviZ version: {}'.format(arviz.__version__))"
          python -c "import pystan;print('PyStan version: {}'.format(pystan.__version__))"
          gcc --version
          which gcc

      - name: Inject timing info (Windows)
        run: |
          python -c "import pystan;print(pystan)"
          powershell -command "(Get-Content 'C:\\Miniconda\\lib\\site-packages\\pystan\\stan_fit.hpp').replace('double sampleDeltaT = 0;', 'double sampleDeltaT = 0; adaptation_info = comments;') | Set-Content 'C:\\Miniconda\\lib\\site-packages\\pystan\\stan_fit.hpp'"
        if: matrix.os == 'windows-latest'

      - name: Inject timing info (macOS)
        run: |
          python -c "import pystan;print(pystan)"
          find /usr/local/miniconda/lib/python3.8/site-packages -type f -wholename "*pystan/stan_fit.hpp" 2>/dev/null | xargs sed -i 's/double sampleDeltaT = 0;/double sampleDeltaT = 0; adaptation_info = comments;\n/'
        if: matrix.os == 'macos-latest'

      - name: Inject timing info (Linux)
        run: |
          python -c "import pystan;print(pystan)"
          find /usr/share/miniconda/lib/python3.8/site-packages -type f -wholename "*pystan/stan_fit.hpp" 2>/dev/null | xargs sed -i 's/double sampleDeltaT = 0;/double sampleDeltaT = 0; adaptation_info = comments;\n/'
        if: matrix.os == 'ubuntu-latest'

      - name: PyStan speed test
        run: |
          python run_PyStan.py


      - name: Upload results
        uses: actions/upload-artifact@v1
        with:
          name: PyStan_results
          path: ./results
